import Link from 'next/link';
import Layout from '../../components/Layout.js';
import { useRouter } from 'next/router'; 
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

export default function ArticlePage({ article }) {
  const router = useRouter();

  // function to delete an article
  const handleDelete = async () => {
    const { error } = await supabase
      .from('articles')
      .delete()
      .match({ id: article.id });

    if (error) {
      console.error('Error deleting article:', error);
    } else {
      router.push('/articles'); // go back to the articles page after deleting the article
    }
  };

  return (
    <Layout
      title={article.title || ' '}
      description="Generated by create next app"
    >
      <div className="back-to-articles">
        <Link href="/articles">
          ‚Üê Back
        </Link>
      </div>
      <h1 className='wt-title'>{article.title || ' '}</h1>
      <p className="article-info">
        {article.author ? `Written by ${article.author.firstname} ${article.author.lastname}` : ' '}
        {article.created_at ? ` - ${new Date(article.created_at).toLocaleDateString()}` : ' '}
      </p>
      <div className="article-content">
        {article.message || ' '}
      </div>
      <button onClick={handleDelete} className="delete-article-button"> 
          Supprimer
      </button>
    </Layout>
  )
}


export async function getStaticProps(ctx) {
  const { id } = ctx.params;
  const { data: article, error } = await supabase
    .from('articles')
    .select(`
      *,
      author:contacts (
        firstname,
        lastname
      )
    `)
    .eq('id', id)
    .single();

  return {
    props: {
      article: article || {}
    }
  };
}

export async function getStaticPaths() {
  const { data: articles, error } = await supabase
    .from('articles')
    .select('id');

  if (error || !articles) {
    console.error('Error fetching articles:', error);
    return { paths: [], fallback: false };
  }

  return {
    paths: articles.map(article => ({ params: { id: article.id.toString() } })),
    fallback: false
  };
}

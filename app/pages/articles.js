import Link from 'next/link'
import NewArticleForm from '../pages/newArticleForm';
import Layout from '../components/Layout.js'
import { createClient } from '@supabase/supabase-js';
import Pagination from '../components/Pagination';
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

export default function Articles({ articles, page, totalPages }) {
  return (
    <Layout title="Articles" description="Generated by create next app">
      <div className="create-article-button">
        <Link href="/newArticleForm">New Article</Link>
      </div>
      <h1 className='wt-title'>Web technologies articles</h1>
      <p className="italic font-bold my-5">Here are all the articles</p>
      <ul>
        {articles.map(article => (
          <li key={article.id} className="my-5">
            <h2 className="font-bold mb-1">
              <Link href={`/articles/${article.id}`}>
                {article.title || ' '} {/* replace null by a blank */}
              </Link>
            </h2>
            <p className="article-info">
              {(article.author ? `Written by ${article.author.firstname} ${article.author.lastname}` : ' ')}
              {article.created_at ? ` - ${new Date(article.created_at).toLocaleDateString()}` : ' '}
            </p>
            {article.image_url && (
              <img src={article.image_url} alt={article.title} className="article-image" />
            )}
            {article.content ? <p className="article-content">{article.content}</p> : ' '}
          </li>
        ))}
      </ul>
      <Pagination currentPage={page} totalPages={totalPages} />
    </Layout>
  )
}





export async function getServerSideProps({ query }) {
  const page = parseInt(query.page) || 1;
  const articlesPerPage = 5; // number of articles per page
  const { data, error, count } = await supabase
    .from('articles')
    .select(`
      *,
      author:contacts (
        firstname,
        lastname
      )
      image_url
    `, { count: 'exact' }) // count the total number of articles
    .order('created_at', { ascending: false }) // order the articles by descending date : most recent first
    .range((page - 1) * articlesPerPage, page * articlesPerPage - 1); // get the articles for the current page
  
  if (error) {
    console.error('Error fetching articles:', error);
    return { props: { articles: [], page, totalPages: 0 } };
  }

  const totalPages = Math.ceil(count / articlesPerPage); // calculate the total number of pages
  return {
    props: {
      articles: data,
      page,
      totalPages
    }
  };
}

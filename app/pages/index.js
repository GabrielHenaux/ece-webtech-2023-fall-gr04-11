import React, { useEffect, useState, useContext } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import Layout from '../components/Layout.js';
import UserContext from '../components/UserContext';
import { createClient } from '@supabase/supabase-js';
import "slick-carousel/slick/slick.css"; 
import "slick-carousel/slick/slick-theme.css";
import Slider from "react-slick";



const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

export default function Page({ articles, topLikedArticles }) {
    const [search, setSearch] = useState('');
    const router = useRouter();

    // Handles the search form submission
    const handleSearch = async (e) => {
        e.preventDefault();
        // Redirects to the same page with the search query
        router.push(`/?search=${search}`);
    };

    const settings = {
        dots: true,
        infinite: true,
        speed: 500,
        slidesToShow: 1,
        slidesToScroll: 1,
        autoplay: true,
        autoplaySpeed: 3500,
      };
      
    return (
        <Layout title="HomePage" description="Generated by create next app">
            <div className="main">
                <h1 className="wt-title">Welcome to Ferrari News website</h1>
                <p className="wt-text">"Passione e potenza italiane dall'inizio alla fine." E.Ferrari </p>

               
                {/* Displaying the search bar */}
                <form onSubmit={handleSearch}>
                    <input
                        type="text"
                        value={search}
                        onChange={(e) => setSearch(e.target.value)}
                        placeholder="Search articles..."
                    />
                    <button type="submit" className="mb-10">Search</button>
                </form>



                {/* Displaying the list of articles or a message if no articles are found */}
                {articles.length > 0 ? (
                    <ul className="mx-auto">
                        {articles.map(article => (
                            <li key={article.id}>
                                {/* Link to the individual article */}
                                <Link href={`/articles/${article.id}`}>
                                    <p>{article.title}</p>
                                </Link>
                            </li>
                        ))}
                    </ul>
                ) : (
                    <p className="text-center">No articles found.</p>
                )}

                {/* Affichage des 3 articles les plus likés */}
                <div className="my-8 mx-auto w-full">
                    <h2 className="text-2xl font-semibold mb-4 text-center">Top Liked Articles</h2>
                    {topLikedArticles.length > 0 ? (
                        <Slider {...settings}>
                            {topLikedArticles.map((article) => (
                                <div key={article.id} className="flex justify-center">
                                    <Link href={`/articles/${article.id}`}>
                                        <div className="cursor-pointer block rounded-lg overflow-hidden shadow-lg bg-white max-w-2xl mx-auto">
                                            <img
                                                src={article.image_url}
                                                alt={article.title}
                                                className="w-full h-80 object-cover"
                                            />
                                            <p className="p-4 text-lg font-medium text-center">{article.title}</p>
                                        </div>
                                    </Link>
                                </div>
                            ))}
                        </Slider>
                    ) : (
                        <p>No top liked articles found.</p>
                    )}
                </div>

            </div>
        </Layout>
    );
}

export async function getServerSideProps({ query }) {
    const searchTerm = query.search || '';
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
    const supabase = createClient(supabaseUrl, supabaseKey);

    let articlesData = [];
    let topLikedArticles = [];
    let error = null;

    // Récupérer les 3 articles les plus likés
    try {
        const { data: topArticles, error: topArticlesError } = await supabase
            .rpc('top_liked_articles') // Utilisez une fonction stockée ou une vue si possible

        if (topArticlesError) throw topArticlesError;

        topLikedArticles = topArticles;
    } catch (e) {
        error = e;
    }

    
    if (searchTerm) {
        const formattedSearchTerm = searchTerm.split(' ').join(' | ');
        const response = await supabase
            .from('articles')
            .select('*, author:profiles (firstname, lastname)')
            .filter('textsearchable_index_col', 'fts', formattedSearchTerm)
            .order('created_at', { ascending: false });

        articlesData = response.data;
        error = response.error || error;
    }

    return {
        props: {
            articles: articlesData,
            topLikedArticles: topLikedArticles,
            error: error
        }
    };
}

